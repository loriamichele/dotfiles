alias vi='vim'
alias ll='ls -lartG'
alias cdv='cd /Users/mike/subito_local'
alias cdc='cd /Users/mike/react_projects/sbt_components'
alias cdcd='cd /Users/mike/git_projects/sbt_components_deploy'
alias v='virgilio'
alias vc='virgilio command -n'
alias vr='virgilio run -n'
alias vs='virgilio stop -n'
alias hostswitch='sudo ~/hosts_switch.sh'
alias taggenjs='sh ~/.vimsetup/genjstags.sh'
alias taggensym='rm tags; ctags -R --exclude=build --exclude=.git --exclude=vendor/phpunit --exclude=node_modules --exclude=docker --exclude=assets --exclude=web/coverage'
alias doc='docker'
alias docps='ruby ~/betterdps.rb -a'
alias docim='ruby ~/betterdim.rb'
alias dockerkillall='docker kill $(docker ps -q)'
alias gprune='git fetch --prune; git branch -r | awk '"'"'{print $1}'"'"' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '"'"'{print $1}'"'"' | xargs git branch -d'
alias newalacritty='open -n /Applications/Alacritty.app'
alias alacritty='~/git_projects/alacritty/target/release/alacritty'

function susp() {
    (
        cdv
        vagrant suspend
    )
}

function boot() {
    (
        cdv
        vagrant resume
        ssh virgilio
    )
}

function tunnel {
    ssh -p 443 -D 2001 -f -C -q -N root@micheleloria.net
    networksetup -setsocksfirewallproxy "Wi-Fi" localhost 2001
}

function detunnel {
    networksetup -setsocksfirewallproxy "Wi-Fi" "" ""
    networksetup -setsocksfirewallproxystate "Wi-Fi" off
    kill $(ps aux | grep "\-N root\@micheleloria" | awk '{print $2}')
}

function gitbranches()
{
    if [[ -z "$1" ]]; then
        echo "Usage: $FUNCNAME <dir>" >&2
        return 1
    fi
    if [[ ! -d "$1" ]]; then
        echo "Invalid dir specified: '${1}'"
        return 1
    fi
    (
        GREEN='\033[0;32m'
        NC='\033[0m'
        BOLD=$(tput bold)
        NORMAL=$(tput sgr0)
        cd "$1"
        printf "${BOLD}%20s ${GREEN}%s${NC}${NORMAL}\n" "Folder" "Branch"
        for sub in *; do
            [[ -d "${sub}/.git" ]] || continue
            printf "%20s ${GREEN}%s${NC}\n" $sub "[$(cd "$sub"; git  branch | grep '^\*' | sed 's/^..//' | sed 's/detached from //')]"
        done
    )
}

function gitrecursivepull()
{
    if [[ -z "$1" ]]; then
        echo "Usage: $FUNCNAME <dir>" >&2
        return 1
    fi
    if [[ ! -d "$1" ]]; then
        echo "Invalid dir specified: '${1}'"
        return 1
    fi
    (
        GREEN='\033[0;32m'
        NC='\033[0m'
        BOLD=$(tput bold)
        NORMAL=$(tput sgr0)
        cd "$1"
        for sub in *; do
            [[ -d "${sub}/.git" ]] || continue
            printf "Pulling ${GREEN}%s${NC}...\n" $sub
            cd $sub
            # git checkout -- .
            git pull
            git submodule sync
            git submodule update --init --recursive
            cd ..
        done
    )
}

function gitrecursiveclean()
{
    if [[ -z "$1" ]]; then
        echo "Usage: $FUNCNAME <dir>" >&2
        return 1
    fi
    if [[ ! -d "$1" ]]; then
        echo "Invalid dir specified: '${1}'"
        return 1
    fi
    echo "Are you really sure? This will delete all the untracked/unstaged/ignored files! [Y/n]"
    read -k 1 answer
    if [[ "$answer" == "Y" ]]
    then
        printf "\n"
        (
            RED='\033[0;31m'
            NC='\033[0m'
            BOLD=$(tput bold)
            NORMAL=$(tput sgr0)
            cd "$1"
            for sub in *; do
                [[ -d "${sub}/.git" ]] || continue
                printf "Cleaning ${RED}%s${NC}...\n" $sub
                cd $sub
                git clean -d -fx ""
                cd ..
            done
        )
    fi
}
